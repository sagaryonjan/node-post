swagger: "2.0"

info:
  title: "Node Post | API Documentation"
  description: "Node blog post apis."
  version: "0.0.1"

basePath: /

schemes:
  - http
  - https

# Securati definations
securityDefinitions:
  JWT:
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in
      the 'Authorization' header.
      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /login giving a valid user & password.
      The following syntax must be used in the 'Authorization' header:
          Bearer xxxxxxyyyyyyyzzzzzz
    type: "apiKey"
    name: "Authorization"
    in: "header"

# Routes
paths:
  /api/posts:
    get:
      summary: "Get posts with paginate data"
      description: "Get Posts with paginate data"
      tags:
        - "Post"
      security:
        - JWT: []
      parameters:
        - in: "query"
          name: "page"
          type: "integer"
          description: "Page"
        - in: "query"
          name: "pageSize"
          type: "integer"
          description: "size of the page"
      responses:
        200:
          description: "OK"
    post:
      summary: "Create new post"
      description: "Create new post"
      tags:
        - "Post"
      security:
        - JWT: []
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PostCreateOrUpdateRequest"
      responses:
        200:
          description: "OK"
  /api/posts/{postId}:
    get:
      summary: "Get post detail by post id"
      description: "Get post detail by post id"
      tags:
        - "Post"
      security:
        - JWT: []
      parameters:
        - in: "path"
          name: "postId"
          type: "integer"
          required: true
          description: "postId"
      responses:
        200:
          description: "OK"
    put:
      summary: "Update post"
      description: "Update post"
      tags:
        - "Post"
      security:
        - JWT: []
      parameters:
        - in: "path"
          name: "postId"
          type: "integer"
          required: true
          description: "postId"
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/PostCreateOrUpdateRequest"
      responses:
        200:
          description: "OK"
    delete:
      summary: "Delete post by post id"
      description: "Delete post by post id"
      tags:
        - "Post"
      security:
        - JWT: []
      parameters:
        - in: "path"
          name: "postId"
          type: "integer"
          required: true
          description: "postId"
      responses:
        200:
          description: "OK"
  /api/auth/login:
    post:
      summary: "User login"
      description: "User Login"
      tags:
        - "Auth"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: "OK"
    
# Responses
responses:
  Unauthorized:
    description: "Unauthorized"
  InternalServerError:
    description: "Internal server error"
  BadRequest:
    description: "Bad Request"
  Forbidden:
    description: "Forbidden"
  NotFound:
    description: "Not found"

# Defination
definitions:
  PostCreateOrUpdateRequest:
    type: "object"
    required:
      - "title"
      - "content"
      - "user_id"
    properties:
      title:
        type: "string"
      content:
        type: "string"
      user_id:
        type: "integer"
  LoginRequest:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
        example: "admin@admin.com"
      password:
        type: "string"
        example: "admin"